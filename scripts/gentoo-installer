#!/usr/bin/env perl

use strict;
use Getopt::Std;

# This script should automate as much of the Gentoo installation as
# possible. For reference, see
#   https://wiki.gentoo.org/wiki/Handbook:AMD64/

# Options:
#   -d device		specify the root disk
#   -i interface	specify the network interface
#   -w			interface is wireless

# run a shell command; if it exits with a non-zero status, print the
# eulogy and die.
sub shell_or_die {
    my ($cmd, $eulogy) = @_;
    printf("\t\$ $cmd\n");
    system("$cmd") && die "[!] $eulogy";
}

# Partition the disks, encrypt the root drive, create the necessary
# file systems, and mount everything/activate swap.
sub disk_setup {
    my $disk = shift;
    my $bootdev = $disk . "1";
    my $cryptdev = $disk . "2";
    print "[+] boot device:  $bootdev\n";
    print "[+] crypt device: $cryptdev\n";

    # The following are the commands to set up a 256M boot partition
    # and an LVM partition taking up the rest of the disk. I typed
    # these out in an interactive fdisk session to make sure they were
    # right.
    my $fdisk_cmd = <<"END";
o
n
p
1
2048
+256M
n
p
2


t
2
8e
w
END
    shell_or_die("echo \"$fdisk_cmd\" | fdisk $disk",
		 "failed to partition disk");
    shell_or_die("cryptsetup luksFormat $cryptdev",
		 "cryptsetup failed");
    shell_or_die("cryptsetup luksOpen $cryptdev lvm",
		 "failed to open crypt device");
    shell_or_die("mkfs.ext3 $bootdev");
    shell_or_die("pvcreate /dev/mapper/lvm", "failed to setup PV");
    shell_or_die("vgcreate vol0 /dev/mapper/lvm", "failed to set up VG");
    shell_or_die("lvcreate --name lv_swap -L 12GB vol0",
		 "failed to set up swap LV");
    shell_or_die("lvcreate --name lv_var -L 20GB vol0",
		 "failed to set up /var LV");
    shell_or_die("lvcreate --name lv_root -l 100%FREE vol0",
		 "failed to set up / LV");
    shell_or_die("mkswap /dev/mapper/vol0-lv_swap",
		 "mkswap failed");
    shell_or_die("swapon /dev/mapper/vol0-lv_swap",
		 "failed to activate swap");
    shell_or_die("mkfs.ext4 /dev/mapper/vol0-lv_root",
		 "failed to format / VG with ext4");
    shell_or_die("mkfs.ext4 /dev/mapper/vol0-lv_var",
		 "failed to format /var VG with ext4");
    shell_or_die("mount /dev/mapper/vol0-lv_root /mnt/gentoo",
		 "failed to mount root");
    shell_or_die("mkdir /mnt/gentoo/var && mount /dev/mapper/vol0-lv_var /mnt/gentoo/var",
		 "failed to mount /var");
    shell_or_die("mkdir /mnt/gentoo/boot && mount $bootdev /mnt/gentoo/boot",
		 "failed to mount /boot");    
}

# show a prompt, read a line of input.
sub read_line {
    print "@_: ";
    chomp(my $answer = <>);

    return $answer;
}

# I can never remember the syntax, so I told it to Perl so it wouldn't
# forget.
sub generate_wpa_conf {
    my $ssid = read_line("SSID");
    my $passphrase = read_line("WPA passphrase");
    
    length $ssid || die '[!] no SSID provided.';
    length $passphrase || die '[!] no WPA passphrase provided';
    
    open(my $wpa_conf, '>/etc/wpa_supplicant.conf') || 
	die '[!] failed to open wpa_supplicant config';
    print $wpa_conf <<"END_CONF";
ctrl_interface=/var/run/wpa_supplicant

network={
	ssid="$ssid"
	key_mgmt=WPA-PSK
	proto=WPA
	psk="$passphrase"
}
END_CONF
	close($wpa_conf);
}

# If this is a wireless setup, create the wpa_supplicant
# configuration. Run DHCP on the interface.
sub setup_network {
    print "[+] setting up networking\n";
    my ($interface, $wireless) = @_;
    
    if (!defined($interface)) {
	$interface = "eth0";
    }

    if ($wireless) {
	generate_wpa_conf();
	shell_or_die("wpa_supplicant -B -i$interface -c/etc/wpa_supplicant.conf",
		     "failed to start wpa_supplicant");
    }

    shell_or_die("dhcpcd $interface", "failed to acquire a DHCP lease");
}

sub main {
    my %opts = {};
    getopts('3d:i:nw', \%opts);


    # 1. Set up networking.
    if (defined($opts{n}) || !$opts{n}) {
	setup_network($opts{i}, $opts{w});
    }

    # 2. Set up disks.
    if (!defined($opts{d})) {
	$opts{d} = "/dev/sda";
    }

    print "[+] setting up disks\n";
    disk_setup($opts{d});

    # 3. Install some useful tools.
    print "[+] installing tools\n";
    shell_or_die("emerge -av mg gnupg2",
		 "failed to install tools");

    # 4. Unpack stage3
    if (defined($opts{3}) && $opts{3}) {
	print "[+] unpacking stage3\n";
	my @stage3 = <"/mnt/livecd/stage3*hardened*.tar.bz2">;
	length @stage3 || die "[!] couldn't find a suitable stage3";
	my $stage3 = shift @stage3;
	shell_or_die("tar xvjpf $stage3 --xattrs -C /mnt/gentoo",
		     "failed to unpack stage3");
    }

    # TODO:
    # + mount the GnuPG keyring files
    # + decrypt the base file system (which would let me skip the
    #   stage3 option above)
    # + unpack the base file system
}

main();
